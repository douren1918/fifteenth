(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var field = document.querySelector('.field');
var squaresArr = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", ""];
var empty = 0; // Копия изначального масива для сравнения условия победы

var winArr = squaresArr.slice(); // перетасовка масива

function shuffleArr(array) {
  var i = array.length,
      j = 0,
      temp;

  while (i--) {
    j = Math.floor(Math.random() * (i + 1)); // swap randomly chosen element with current element

    temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
} // рендерим перетасованый масив значений  


function renderSquares() {
  squaresArr.forEach(function (element) {
    var square = document.createElement('div');
    square.textContent = element;
    field.append(square);
  });
} // Поиск пустого элемента масива 


function isEmptySquare(square, index) {
  if (square.textContent == "") {
    square.textContent = "";
    square.classList.add("empty");
    empty = index;
  }
}

function replaceSquares(target, index) {
  empty = index;
  var beforeReplaceSquare = target;
  var beforeReplaceEmpty = document.querySelector(".empty");
  var square;
  square = beforeReplaceSquare.textContent;
  beforeReplaceSquare.innerHTML = "";
  beforeReplaceSquare.classList.add('empty');
  beforeReplaceEmpty.classList.remove('empty');
  beforeReplaceEmpty.textContent = square;
} // Проверка на равенство изначального масива значений с нынешним 


function isWin() {
  var arrWinConditional = [];

  for (var i = 0; i < squares.length; i++) {
    arrWinConditional.push(squares[i].textContent);
  }

  if (JSON.stringify(arrWinConditional) === JSON.stringify(winArr)) {
    alert("You win!");
  }
}

shuffleArr(squaresArr);
renderSquares();
var squares = document.querySelectorAll(".field div");

function moveSquare() {
  squares.forEach(function (element, index) {
    isEmptySquare(element, index);
    element.addEventListener('click', function (e) {
      // Проверка на угловые значения 5, 9, 8, 12 
      if (index % 4 - empty % 4 !== 3 && index % 4 - empty % 4 !== -3) {
        // Проверка на квадраты только вокруг
        if (index == empty - 1 || index == empty + 1 || index == empty - 4 || index == empty + 4) {
          replaceSquares(e.target, index);
          isWin();
        }
      }
    });
  });
}

moveSquare();

},{}],2:[function(require,module,exports){
"use strict";

(function () {})();

},{}],3:[function(require,module,exports){
"use strict";

console.log("js build");

},{}],4:[function(require,module,exports){
"use strict";

document.addEventListener('DOMContentLoaded', function () {
  require('./vendor/slick.min');

  require('./components/js-connect');

  require('./components/header');

  require('./components/field');
});

},{"./components/field":1,"./components/header":2,"./components/js-connect":3,"./vendor/slick.min":5}],5:[function(require,module,exports){
"use strict";

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
